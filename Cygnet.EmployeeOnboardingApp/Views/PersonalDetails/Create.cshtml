@*model Cygnet.EmployeeOnboardingApp.Data.Model.PersonalDetails*@
@model Cygnet.EmployeeOnboardingApp.Domain.ViewModel.PersonalDetailsViewModel
@{
    /**/

    ViewBag.Title = "PersonalDetails";
}
<meta name="viewport" content="width=device-width" />   

@*<!DOCTYPE html>

    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>Create</title>
    </head>
    <body>*@
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>PersonalDetails</h4>
    @Html.HiddenFor(model => model.UserId)
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Father_Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Father_Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Father_Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Sex, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("Sex", new List<SelectListItem>
       {
  new SelectListItem{Text="Male",Value="Male"},
  new SelectListItem{Text="Female",Value="Female"},
  new SelectListItem{Text="Transgender",Value="Transgender"}

},"Select", new { htmlAttributes = new {@class="dropdown-menu"}})
            @Html.ValidationMessageFor(model => model.Sex, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Marital_Stat, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("Marital_Stat", new List<SelectListItem>
         {
           new SelectListItem{Text="Married",Value="Married"},
           new SelectListItem{Text="Unmarried",Value="Unmarried"},
           new SelectListItem{Text="Divorcee",Value="Divorcee"},
           new SelectListItem{Text="Widow",Value="Widow"},
            },"Select", new { htmlAttributes = new {@class="dropdown-menu"}})
            @Html.ValidationMessageFor(model => model.Marital_Stat, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Date_Anniv, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Date_Anniv, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Date_Anniv, "", new { @class = "text-danger" })
        </div>
    </div>


    @*@if (Model.Marital_Stat == "Married")
    {
        Server.TransferRequest(Request.Url.AbsolutePath, false);
    }*@



        <div class="form-group">
            @Html.LabelFor(model => model.Dob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Dob, new { htmlAttributes = new { @class = "form-control" , @readonly = "true" } })
                @Html.ValidationMessageFor(model => model.Dob, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name_Company, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name_Company, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name_Company, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Department, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Blood_Grp, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Blood_Grp", new List<SelectListItem>
            {
       new SelectListItem{Text="A+",Value="A+"},
       new SelectListItem{Text="A-",Value="A-"},
       new SelectListItem{Text="B+",Value="B+"},
        new SelectListItem{Text="B-",Value="B-"},
         new SelectListItem{Text="AB+",Value="AB+"},
          new SelectListItem{Text="AB-",Value="AB-"},
           new SelectListItem{Text="O+",Value="O+"},
            new SelectListItem{Text="O-",Value="O-"}

    },"Select", new { htmlAttributes = new {@class="dropdown-menu"}})
                @Html.ValidationMessageFor(model => model.Blood_Grp, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Allergy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Allergy, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Allergy, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Ailment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Ailment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Ailment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save and Continue" class="btn btn-default" />
            </div>
        </div>
    </div>

}
@*<div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="button" value="Next" class="btn btn-default" onclick="location.href='@Url.Action("Create","ContactDetails")'" />
        </div>
    </div>*@

<div>
</div>
@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">
        $(document).ready(function () {
            $('input[type=datetime]').datepicker({
                dateFormat: "dd/M/yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-60:+0",
                //setDate: '@Model.Dob'

            });

        });
        
    </script> 

}

@*</body>
    </html>*@